import { createContext, useEffect, useReducer } from "react";
import financeReducer from "../reducers/FinanceReducer"; //Maneja las acciones y modificaciones del estado financiero.

//! es un ‚ÄúContexto de Finanzas‚Äù que se encarga de compartir la informaci√≥n relacionada con los ingresos, gastos y ahorros a todos los componentes que necesiten acceder a estos datos. Este contexto manejar√° el acceso y las actualizaciones de las finanzas en toda la aplicaci√≥n. Har√° que los datos financieros est√©n disponibles para todos los componentes de la aplicaci√≥n.

const FinanceContext = createContext(); //Creaci√≥n del contexto. Este contexto proporcionar√° el estado de las finanzas y la capacidad de actualizarlo (a trav√©s de "dispatch") a cualquier componente que lo consuma.

// Definir las categor√≠as y tipos centralizadamente
export const categories = [
  'Home üè†', 'Transportation üöó', 'Food & Groceries üçΩÔ∏è', 'Health & Wellness üè•',
  'Leisure & Entertainment üé≠', 'Travel ‚úàÔ∏è', 'Subscriptions üí≥', 'Shopping üõçÔ∏è',
  'Education üìö', 'Gifts üéÅ', 'Debt üè¶', 'Other ‚ùì'
];

//* Inicializamos el estado inicial de las finanzas
const initialState = {
  income: [],
  expenses: [],
  savings: 0, // es un n√∫mero porque no se van a ir agregando datos de ahorros, solo se va a actualizar el valor.
  categories
}

//* Funci√≥n para obtener el estado inicial de las finanzas desde el localStorage.
const getInitialState = () => {
  console.log("Accediendo a localStorage");
  const storedState = localStorage.getItem('financeData');//Esta funci√≥n se encarga de obtener el estado inicial. Intenta leer los datos almacenados previamente en el localStorage bajo la clave "financeData", hecho en FinanceReducer.jsx.

  console.log("Datos en localStorage FinanceContext 1:", storedState); //! Para ve lo que est√° en localStorage

    if (storedState) {
      try {
        const parsedState = JSON.parse(storedState);

        // Aseg√∫rate de que las categor√≠as y tipos est√©n presentes, si no, asigna los valores predeterminados
        if (!parsedState.categories) {
          parsedState.categories = categories; // Asignar valores predeterminados
        }

        return parsedState;
      } catch (e) {
        console.error("Error al parsear localStorage:", e);
      }
    }

  return initialState; //Si no hay datos en localStorage, simplemente devuelve el estado inicial definido en "initialState".
};

// FinanceProvider es un componente que act√∫a como proveedor del contexto. Los componentes que se encuentren dentro de este proveedor tendr√°n acceso a los datos financieros y la capacidad de actualizarlos. Por eso rodamos <App/> siendo el children.
export const FinanceProvider = ({ children }) => {
  const [state, dispatch] = useReducer(financeReducer, getInitialState()); //Usamos useReducer para manejar el estado de las finanzas. El primer par√°metro es el reducer (financeReducer) que contiene la l√≥gica de c√≥mo cambiar el estado. El segundo par√°metro es el estado inicial que se obtiene mediante getInitialState(), como pusimos anteriormente. "state" es el estado actual que contiene los ingresos, gastos y ahorros. "dispatch" es una funci√≥n que permite enviar acciones al reducer para actualizar el estado.


  // Verifica que el estado est√© correctamente inicializado
  console.log("State en FinanceProvider:", state);

  //* Guardar el estado financiero en el localStorage cada vez que cambie.
  useEffect(() => {
    console.log("Guardando en localStorage FinanceContext 2:", state); //! Para ver el estado que guardamos en localStorage
    localStorage.setItem("financeData", JSON.stringify(state)); //El estado se convierte en una cadena JSON antes de ser guardado. 
  }, [state]); //Se ejecuta cada vez que el estado (state) cambia. Es decir, cuando agregamos un nuevo gasto, ingreso o actualizamos el ahorro.

  return (
    //Este es el proveedor del contexto. Envuelve a todos los componentes hijos y les propociona acceso al contexto financiero. value={{ state, dispatch }}: Proporciona tanto el state como la funci√≥n dispatch al contexto. Los componentes que consuman este contexto podr√°n acceder a ambos valores.
    <FinanceContext.Provider value={{ state, dispatch }}>
      {children}
    </FinanceContext.Provider>
  );
};

export default FinanceContext;